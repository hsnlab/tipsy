# -*- mode: python; -*-

# TIPSY: Telco pIPeline benchmarking SYstem
#
# Copyright (C) 2017-2018 by its authors (See AUTHORS)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import re
import os
import socket
import struct
import sys
import json
import time
import subprocess


def aton(ip):
  return socket.inet_aton(ip)

def aton_int(ip):
  return struct.unpack("!I", socket.inet_aton(ip))[0]

def mac_from_str(s):
  return ''.join([ chr(int(c, 16)) for c in s.split(':') ])

def mac_int_from_str(s):
  return int("0x%s" % ''.join(s.split(':')), 16)

def coremask_to_corelist(coremask):
  cpum = int(coremask, 16)
  return [i for i in range(32) if (cpum >> i) & 1 == 1]

class ObjectView(object):
  def __init__(self, **kwargs):
    tmp = {k.replace('-', '_'): v for k, v in kwargs.items()}
    self.__dict__.update(**tmp)

  def __repr__(self):
    return self.__dict__.__repr__()

def conv_fn(d): return ObjectView(**d)

pl_conf_file = $pl_config!'./portfwd.json'
bm_conf_file = $bm_config!'./benchmark.json'
with open(pl_conf_file, 'r') as f:
  conf = json.load(f, object_hook=conv_fn)
with open(bm_conf_file, 'r') as f:
  bm_conf = json.load(f, object_hook=conv_fn)

bess_dlport = int(bm_conf.sut.downlink_port)
bess_ulport = int(bm_conf.sut.uplink_port)
bess_workers = int(conf.core)
corelist = coremask_to_corelist(bm_conf.sut.coremask)

portDL = PMDPort(port_id=bess_dlport,
                 num_inc_q=bess_workers,
                 num_out_q=bess_workers)

if bess_dlport == bess_ulport:
  portUL = portDL
else:
  portUL = PMDPort(port_id=bess_ulport,
                    num_inc_q=bess_workers,
                    num_out_q=bess_workers)


for wid in range(bess_workers):
  wid2 = bess_workers + wid
  dl_input = QueueInc(name="dl_inport_%d" % wid, port=portDL.name, qid=wid)
  dl_output = QueueOut(name="dl_outport_%d" % wid, port=portDL.name, qid=wid)
  ul_input = QueueInc(name="ul_inport_%d" % wid, port=portUL.name, qid=wid)
  ul_output = QueueOut(name="ul_outport_%d" % wid, port=portUL.name, qid=wid)

  buf_u = Buffer(name='out_buf_u_%d' % wid)
  buf_d = Buffer(name='out_buf_d_%d' % wid)

  if conf.fakedrop:
    drop_u = buf_u
    drop_d = buf_d
  else:
    drop_u = Sink()
    drop_d = Sink()

  try:
    bess.add_worker(wid, corelist[wid])
    bess.add_worker(wid2, corelist[wid2])
  except IndexError:
    sys.exit('ERROR: Insufficient number of available cores.')


  bess.add_tc('traffic_mgmt_%d' % wid, 'weighted_fair', wid=wid, resource='cycle')

  l2_fwd = ExactMatch(name='l2_fwd_%d' % wid,
                      fields=[{'offset': 0, 'num_bytes': 6}]) # dst MAC
  l2_fwd.add(fields=[{'value_bin': mac_from_str(conf.gw.mac)}], gate=0)
  l2_fwd.set_default_gate(gate=1)

  ethertype = ExactMatch(name='ethertype_%d' % wid,
                         fields=[{'offset': 12, 'num_bytes': 2}]) # ethertype
  ethertype.add(fields=[{'value_bin': struct.pack("!H", 0x0800)}], gate=0)
  ethertype.set_default_gate(gate=1)

  dir_selector = ExactMatch(name='dir_selector_%d' % wid,
                            fields=[{'offset': 30, 'num_bytes': 4},   # dst IP
                                    {'offset': 23, 'num_bytes': 1},   # IP proto
                                    {'offset': 36, 'num_bytes': 2}])  # dst port
  dir_selector.add(fields=[{'value_bin': aton(conf.gw.ip)},
                           {'value_bin': chr(17)},
                           {'value_bin': struct.pack("!H", 4789)}], # VXLAN port
                   gate=0) # uplink
  dir_selector.set_default_gate(gate=1) # downlink

  # uplink
  vxlan_decap = VXLANDecap()
  fw_allow = [{'src_ip': '', 'dst_ip': '',
               'src_port': 0, 'dst_port': 0,
               'drop': False}]
  ul_fw_rules = [e.__dict__ for e in conf.ul_fw_rules] + fw_allow
  ul_fw = ACL(name='ul_fw_%d' % wid, rules=ul_fw_rules)
  ul_nat = ExactMatch(name='u_nat_%d' % wid,
                      fields=[{'offset': 26, 'num_bytes': 4},   # src IP
                              {'offset': 23, 'num_bytes': 1},   # IP proto
                              {'offset': 34, 'num_bytes': 2}])  # src port
  ul_nat.set_default_gate(gate=0)
  preteid_ip_chk = IPChecksum(name='preteid_ip_chk_%d' % wid)
  for i, e in enumerate(conf.nat_table, start=1):
      ul_nat.add(fields=[{'value_bin': aton(e.priv_ip)},
                         {'value_bin': chr(e.proto)},
                         {'value_bin': struct.pack("!H", e.priv_port)}],
                 gate=i)
      update_ip = Update(name='u_nat_update_ip_%d_%d' % (i, wid),
                         fields=[{'offset': 26, 'size':4,    # src IP
                                  'value': aton_int(e.pub_ip)}])
      update_port = Update(name='u_nat_update_port_%d_%d' % (i, wid),
                           fields=[{'offset': 26, 'size':4,  # src port
                                    'value': e.pub_port}])
      ul_nat:i -> update_ip -> update_port -> preteid_ip_chk

  teid_split = Split(name='teid_split_%d' % wid,
                     attribute='tun_id', size=4)

  fluct_srv_num = len([True for a in conf.run_time
                    if 'add_server' in a.action])
  fibsize = 1 + len(conf.srvs) + len(conf.cpe) + fluct_srv_num
  ip_lookup = IPLookup(name='ip_lookup_%d' % wid,
                       max_rules=fibsize)
  ip_lookup.add(prefix='0.0.0.0', prefix_len=0, gate=0)

  buf2 = Buffer(name='prel3_buf_%d' % wid)

  for user in conf.users:
    teid = user.teid
    name = "t_%d_%d" % (wid, teid)
    q = Queue(name='rl_%d_%d' % (wid, teid))
    bess.add_tc(name, policy='rate_limit',
                resource='bit', limit={'bit': user.rate_limit},
                share=1, parent='traffic_mgmt_%d' % wid)
    q.attach_task(parent=name)
    teid_split:teid -> q -> buf2

  uttl_u = UpdateTTL(name='uttl_u_%d' % wid) # Bring before ip_lookup?
  uttl_d = UpdateTTL(name='uttl_d_%d' % wid) # Bring before ip_lookup?
  nhop_split = Split(name='nhop_split_%d' % wid,
                     attribute='nhop', size=4)

  for i,srv in enumerate(conf.srvs, start=1):
    ip = re.sub(r'\.[^.]+$', '.0', srv.ip)
    ip_lookup.add(prefix=ip, prefix_len=24, gate=i)
    nmd = SetMetadata(name='setmd_srv%d_%d' % (i, wid),
                      attrs=[{'name': 'nhop', 'size': 4,
                              'value_int': srv.nhop}])
    ip_lookup:i -> nmd -> nhop_split

  for i,nhop in enumerate(conf.nhops):
    update_s_mac = Update(name='u_nhop%d_smac_%d' % (i, wid),
                          fields=[{'offset': 6, 'size': 6,
                                   'value': mac_int_from_str(nhop.smac)}])
    update_d_mac = Update(name='u_nhop%d_dmac_%d' % (i, wid),
                          fields=[{'offset': 0, 'size': 6,
                                   'value': mac_int_from_str(nhop.dmac)}])
    nhop_split:i -> update_s_mac -> update_d_mac -> uttl_u

  # downlink
  predlfw_ip_chk = IPChecksum(name='predlfw_ip_chk_%d' % wid)
  dl_nat = ExactMatch(name='d_nat_%d' % wid,
                      fields=[{'offset': 30, 'num_bytes': 4},   # dst IP
                              {'offset': 23, 'num_bytes': 1},   # IP proto
                              {'offset': 36, 'num_bytes': 2}])  # dst port)
  dl_nat.set_default_gate(gate=0)
  for i, e in enumerate(conf.nat_table, start=1):
    dl_nat.add(fields=[{'value_bin': aton(e.pub_ip)},
                       {'value_bin': chr(e.proto)},
                       {'value_bin': struct.pack("!H", e.pub_port)}],
                 gate=i)
    update_ip = Update(name='d_nat_update_ip_%d_%d' % (i, wid),
                       fields=[{'offset': 30, 'size':4,    # dst IP
                                'value': aton_int(e.priv_ip)}])
    update_port = Update(name='d_nat_update_port_%d_%d' % (i, wid),
                         fields=[{'offset': 36, 'size':2,  # dst port
                                  'value': e.priv_port}])
    dl_nat:i -> update_ip -> update_port -> predlfw_ip_chk
  dl_fw_rules = [e.__dict__ for e in conf.dl_fw_rules] + fw_allow
  dl_fw = ACL(name='dl_fw_%d' % wid, rules=dl_fw_rules)
  ue_selector = ExactMatch(name='ue_selector_%d' % wid,
                           fields=[{'offset': 30, 'num_bytes': 4}]) # dst IP
  ue_selector.set_default_gate(gate=0)
  vxlan_encap = VXLANEncap(name='vxlan_encap_%d' % wid)
  for user in conf.users:
    ue_selector.add(fields=[{'value_bin': aton(user.ip)}],
                             gate=user.teid)
    tun_ip_dst = conf.cpe[user.tun_end].ip
    vxlan_md = SetMetadata(name='setmd_dl_%d_%d' % (user.teid, wid),
                           attrs=[{'name': 'tun_id', 'size': 4,
                                   'value_int': user.teid},
                                  {'name': 'tun_ip_src', 'size': 4,
                                   'value_bin': aton(conf.gw.ip)},
                                  {'name': 'tun_ip_dst', 'size': 4,
                                   'value_bin': aton(tun_ip_dst)}])
    ue_selector:user.teid -> vxlan_md -> vxlan_encap

  for i,cpe in enumerate(conf.cpe, start=len(conf.srvs)+1):
    ip_lookup.add(prefix=cpe.ip, prefix_len=32, gate=i)
    update_s_mac = Update(name='u_cpe%d_smac_%d' % (cpe.id, wid),
                          fields=[{'offset': 6, 'size': 6,
                                   'value': mac_int_from_str(conf.gw.mac)}])
    update_d_mac = Update(name='u_cpe%d_dmac_%d' % (cpe.id, wid),
                          fields=[{'offset': 0, 'size': 6,
                                   'value': mac_int_from_str(cpe.mac)}])
    ip_lookup:i -> update_s_mac -> update_d_mac -> uttl_d

  q = Queue(name='input_q_%d' % wid)
  bess.attach_task(q.name, wid=wid)

  dl_input -> q
  ul_input -> q
  q -> l2_fwd

  l2_fwd:0 -> ethertype
  l2_fwd:1 -> drop_d

  ethertype:0 -> dir_selector
  ethertype:1 -> drop_d  # arp, infraCP (not implemented)

  dir_selector:0 -> vxlan_decap -> ul_fw -> ul_nat -> teid_split
  preteid_ip_chk -> teid_split

  dir_selector:1 -> dl_nat -> dl_fw
  predlfw_ip_chk -> dl_fw -> ue_selector
  ue_selector -> drop_d

  ip_lookup:0 -> drop_u
  buf2 -> ip_lookup

  vxlan_encap -> IPEncap() -> EtherEncap() -> teid_split

  uttl_u -> buf_u -> ul_output
  uttl_d -> buf_d -> dl_output

  bess.attach_task(dl_input.name, wid=wid)
  bess.attach_task(ul_input.name, wid=wid2)

try:
    bess.track_gate(False, '', '', bits=True)
except AttributeException:
    bess.track_module('', False, bits=True)
